// Generated by rstantools.  Do not edit by hand.

#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_model3_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_model3");
    reader.add_event(108, 106, "end", "model_model3");
    return reader;
}
#include <stan_meta_header.hpp>
class model_model3
  : public stan::model::model_base_crtp<model_model3> {
private:
        int N;
        vector_d y;
        int K;
        matrix_d X;
        int M_K;
        matrix_d M;
        int N_pred;
        matrix_d X_pred;
        matrix_d M_pred;
        matrix_d X_std;
        matrix_d X_pred_std;
        vector_d mean_X;
        vector_d sd_X;
        matrix_d M_std;
        matrix_d M_pred_std;
        vector_d mean_M;
        vector_d sd_M;
        double mean_y;
        double sd_y;
        vector_d y_std;
        int sumN;
public:
    model_model3(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_model3(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_model3_namespace::model_model3";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 21;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);
            current_statement_begin__ = 22;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(N));
            y = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                y(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 23;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 0);
            current_statement_begin__ = 24;
            validate_non_negative_index("X", "N", N);
            validate_non_negative_index("X", "K", K);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(N,K));
            X = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, K);
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_2_max__ = K;
            size_t X_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    X(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "M_K", "int", context__.to_vec());
            M_K = int(0);
            vals_i__ = context__.vals_i("M_K");
            pos__ = 0;
            M_K = vals_i__[pos__++];
            check_greater_or_equal(function__, "M_K", M_K, 0);
            current_statement_begin__ = 26;
            validate_non_negative_index("M", "N", N);
            validate_non_negative_index("M", "M_K", M_K);
            context__.validate_dims("data initialization", "M", "matrix_d", context__.to_vec(N,M_K));
            M = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, M_K);
            vals_r__ = context__.vals_r("M");
            pos__ = 0;
            size_t M_j_2_max__ = M_K;
            size_t M_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < M_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < M_j_1_max__; ++j_1__) {
                    M(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 27;
            context__.validate_dims("data initialization", "N_pred", "int", context__.to_vec());
            N_pred = int(0);
            vals_i__ = context__.vals_i("N_pred");
            pos__ = 0;
            N_pred = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_pred", N_pred, 1);
            current_statement_begin__ = 28;
            validate_non_negative_index("X_pred", "N_pred", N_pred);
            validate_non_negative_index("X_pred", "K", K);
            context__.validate_dims("data initialization", "X_pred", "matrix_d", context__.to_vec(N_pred,K));
            X_pred = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N_pred, K);
            vals_r__ = context__.vals_r("X_pred");
            pos__ = 0;
            size_t X_pred_j_2_max__ = K;
            size_t X_pred_j_1_max__ = N_pred;
            for (size_t j_2__ = 0; j_2__ < X_pred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_pred_j_1_max__; ++j_1__) {
                    X_pred(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 29;
            validate_non_negative_index("M_pred", "N_pred", N_pred);
            validate_non_negative_index("M_pred", "M_K", M_K);
            context__.validate_dims("data initialization", "M_pred", "matrix_d", context__.to_vec(N_pred,M_K));
            M_pred = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N_pred, M_K);
            vals_r__ = context__.vals_r("M_pred");
            pos__ = 0;
            size_t M_pred_j_2_max__ = M_K;
            size_t M_pred_j_1_max__ = N_pred;
            for (size_t j_2__ = 0; j_2__ < M_pred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < M_pred_j_1_max__; ++j_1__) {
                    M_pred(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            // initialize transformed data variables
            current_statement_begin__ = 33;
            validate_non_negative_index("X_std", "N", N);
            validate_non_negative_index("X_std", "K", K);
            X_std = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, K);
            stan::math::fill(X_std, DUMMY_VAR__);
            current_statement_begin__ = 34;
            validate_non_negative_index("X_pred_std", "N_pred", N_pred);
            validate_non_negative_index("X_pred_std", "K", K);
            X_pred_std = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N_pred, K);
            stan::math::fill(X_pred_std, DUMMY_VAR__);
            current_statement_begin__ = 35;
            validate_non_negative_index("mean_X", "K", K);
            mean_X = Eigen::Matrix<double, Eigen::Dynamic, 1>(K);
            stan::math::fill(mean_X, DUMMY_VAR__);
            current_statement_begin__ = 36;
            validate_non_negative_index("sd_X", "K", K);
            sd_X = Eigen::Matrix<double, Eigen::Dynamic, 1>(K);
            stan::math::fill(sd_X, DUMMY_VAR__);
            current_statement_begin__ = 37;
            validate_non_negative_index("M_std", "N", N);
            validate_non_negative_index("M_std", "M_K", M_K);
            M_std = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, M_K);
            stan::math::fill(M_std, DUMMY_VAR__);
            current_statement_begin__ = 38;
            validate_non_negative_index("M_pred_std", "N_pred", N_pred);
            validate_non_negative_index("M_pred_std", "M_K", M_K);
            M_pred_std = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N_pred, M_K);
            stan::math::fill(M_pred_std, DUMMY_VAR__);
            current_statement_begin__ = 39;
            validate_non_negative_index("mean_M", "M_K", M_K);
            mean_M = Eigen::Matrix<double, Eigen::Dynamic, 1>(M_K);
            stan::math::fill(mean_M, DUMMY_VAR__);
            current_statement_begin__ = 40;
            validate_non_negative_index("sd_M", "M_K", M_K);
            sd_M = Eigen::Matrix<double, Eigen::Dynamic, 1>(M_K);
            stan::math::fill(sd_M, DUMMY_VAR__);
            current_statement_begin__ = 41;
            mean_y = double(0);
            stan::math::fill(mean_y, DUMMY_VAR__);
            stan::math::assign(mean_y,mean(y));
            current_statement_begin__ = 42;
            sd_y = double(0);
            stan::math::fill(sd_y, DUMMY_VAR__);
            stan::math::assign(sd_y,sd(y));
            current_statement_begin__ = 44;
            validate_non_negative_index("y_std", "N", N);
            y_std = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            stan::math::fill(y_std, DUMMY_VAR__);
            stan::math::assign(y_std,divide(subtract(y, mean_y), sd_y));
            current_statement_begin__ = 45;
            sumN = int(0);
            stan::math::fill(sumN, std::numeric_limits<int>::min());
            stan::math::assign(sumN,(N + N_pred));
            // execute transformed data statements
            current_statement_begin__ = 51;
            for (int k = 1; k <= K; ++k) {
                current_statement_begin__ = 52;
                stan::model::assign(mean_X, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                            mean(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), "X")), 
                            "assigning variable mean_X");
                current_statement_begin__ = 53;
                stan::model::assign(sd_X, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                            sd(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), "X")), 
                            "assigning variable sd_X");
                current_statement_begin__ = 54;
                stan::model::assign(X_std, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), 
                            divide(subtract(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), "X"), get_base1(mean_X, k, "mean_X", 1)), get_base1(sd_X, k, "sd_X", 1)), 
                            "assigning variable X_std");
                current_statement_begin__ = 55;
                stan::model::assign(X_pred_std, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), 
                            divide(subtract(stan::model::rvalue(X_pred, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), "X_pred"), get_base1(mean_X, k, "mean_X", 1)), get_base1(sd_X, k, "sd_X", 1)), 
                            "assigning variable X_pred_std");
            }
            current_statement_begin__ = 58;
            for (int j = 1; j <= M_K; ++j) {
                current_statement_begin__ = 59;
                stan::model::assign(mean_M, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            mean(stan::model::rvalue(M, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), "M")), 
                            "assigning variable mean_M");
                current_statement_begin__ = 60;
                stan::model::assign(sd_M, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            sd(stan::model::rvalue(M, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), "M")), 
                            "assigning variable sd_M");
                current_statement_begin__ = 61;
                stan::model::assign(M_std, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            divide(subtract(stan::model::rvalue(M, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), "M"), get_base1(mean_M, j, "mean_M", 1)), get_base1(sd_M, j, "sd_M", 1)), 
                            "assigning variable M_std");
                current_statement_begin__ = 62;
                stan::model::assign(M_pred_std, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            divide(subtract(stan::model::rvalue(M_pred, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), "M_pred"), get_base1(mean_M, j, "mean_M", 1)), get_base1(sd_M, j, "sd_M", 1)), 
                            "assigning variable M_pred_std");
            }
            // validate transformed data
            current_statement_begin__ = 45;
            check_greater_or_equal(function__, "sumN", sumN, 1);
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 68;
            num_params_r__ += 1;
            current_statement_begin__ = 69;
            validate_non_negative_index("beta", "K", K);
            num_params_r__ += (K - 1);
            current_statement_begin__ = 73;
            validate_non_negative_index("gamma", "M_K", M_K);
            num_params_r__ += M_K;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_model3() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 68;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 69;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "K", K);
        context__.validate_dims("parameter initialization", "beta", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta(K);
        size_t beta_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            beta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.simplex_unconstrain(beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 73;
        if (!(context__.contains_r("gamma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gamma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gamma");
        pos__ = 0U;
        validate_non_negative_index("gamma", "M_K", M_K);
        context__.validate_dims("parameter initialization", "gamma", "vector_d", context__.to_vec(M_K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> gamma(M_K);
        size_t gamma_j_1_max__ = M_K;
        for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
            gamma(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(gamma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gamma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 68;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lb_constrain(0, lp__);
            else
                sigma = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 69;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.simplex_constrain(K, lp__);
            else
                beta = in__.simplex_constrain(K);
            current_statement_begin__ = 73;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> gamma;
            (void) gamma;  // dummy to suppress unused var warning
            if (jacobian__)
                gamma = in__.vector_constrain(M_K, lp__);
            else
                gamma = in__.vector_constrain(M_K);
            // model body
            current_statement_begin__ = 90;
            lp_accum__.add(normal_log<propto__>(sigma, 0, 1));
            current_statement_begin__ = 92;
            lp_accum__.add(normal_log<propto__>(gamma, 0, 1));
            current_statement_begin__ = 93;
            lp_accum__.add(normal_log(y_std, add(multiply(X_std, beta), multiply(M_std, gamma)), sigma));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("sigma");
        names__.push_back("beta");
        names__.push_back("gamma");
        names__.push_back("y_sim");
        names__.push_back("y_pred");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M_K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_pred);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_model3_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma);
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta = in__.simplex_constrain(K);
        size_t beta_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            vars__.push_back(beta(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> gamma = in__.vector_constrain(M_K);
        size_t gamma_j_1_max__ = M_K;
        for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
            vars__.push_back(gamma(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 98;
            validate_non_negative_index("y_sim", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> y_sim(N);
            stan::math::initialize(y_sim, DUMMY_VAR__);
            stan::math::fill(y_sim, DUMMY_VAR__);
            current_statement_begin__ = 99;
            validate_non_negative_index("y_pred", "N_pred", N_pred);
            Eigen::Matrix<double, Eigen::Dynamic, 1> y_pred(N_pred);
            stan::math::initialize(y_pred, DUMMY_VAR__);
            stan::math::fill(y_pred, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 100;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 101;
                stan::model::assign(y_sim, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((normal_rng((multiply(stan::model::rvalue(X_std, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X_std"), beta) + multiply(stan::model::rvalue(M_std, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "M_std"), gamma)), sigma, base_rng__) * sd_y) + mean_y), 
                            "assigning variable y_sim");
            }
            current_statement_begin__ = 103;
            for (int j = 1; j <= N_pred; ++j) {
                current_statement_begin__ = 104;
                stan::model::assign(y_pred, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            ((normal_rng((multiply(stan::model::rvalue(X_pred_std, stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X_pred_std"), beta) + multiply(stan::model::rvalue(M_pred_std, stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "M_pred_std"), gamma)), sigma, base_rng__) * sd_y) + mean_y), 
                            "assigning variable y_pred");
            }
            // validate, write generated quantities
            current_statement_begin__ = 98;
            size_t y_sim_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < y_sim_j_1_max__; ++j_1__) {
                vars__.push_back(y_sim(j_1__));
            }
            current_statement_begin__ = 99;
            size_t y_pred_j_1_max__ = N_pred;
            for (size_t j_1__ = 0; j_1__ < y_pred_j_1_max__; ++j_1__) {
                vars__.push_back(y_pred(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_model3";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_j_1_max__ = M_K;
        for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t y_sim_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < y_sim_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_sim" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t y_pred_j_1_max__ = N_pred;
        for (size_t j_1__ = 0; j_1__ < y_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_j_1_max__ = (K - 1);
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_j_1_max__ = M_K;
        for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t y_sim_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < y_sim_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_sim" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t y_pred_j_1_max__ = N_pred;
        for (size_t j_1__ = 0; j_1__ < y_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_model3_namespace::model_model3 stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
