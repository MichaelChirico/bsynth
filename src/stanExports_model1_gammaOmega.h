// Generated by rstantools.  Do not edit by hand.

#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_model1_gammaOmega_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_model1_gammaOmega");
    reader.add_event(88, 86, "end", "model_model1_gammaOmega");
    return reader;
}
#include <stan_meta_header.hpp>
class model_model1_gammaOmega
  : public stan::model::model_base_crtp<model_model1_gammaOmega> {
private:
        int K;
        vector_d X1;
        int J;
        matrix_d X0;
        int T_post;
        matrix_d X0_pred;
        vector_d vs;
        matrix_d X0_std;
        matrix_d X0_pred_std;
        vector_d mean_X0;
        vector_d sd_X0;
        double mean_X1;
        double sd_X1;
        vector_d X1_std;
        vector_d vs_std;
public:
    model_model1_gammaOmega(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_model1_gammaOmega(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_model1_gammaOmega_namespace::model_model1_gammaOmega";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 22;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 1);
            current_statement_begin__ = 23;
            validate_non_negative_index("X1", "K", K);
            context__.validate_dims("data initialization", "X1", "vector_d", context__.to_vec(K));
            X1 = Eigen::Matrix<double, Eigen::Dynamic, 1>(K);
            vals_r__ = context__.vals_r("X1");
            pos__ = 0;
            size_t X1_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < X1_j_1_max__; ++j_1__) {
                X1(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 24;
            context__.validate_dims("data initialization", "J", "int", context__.to_vec());
            J = int(0);
            vals_i__ = context__.vals_i("J");
            pos__ = 0;
            J = vals_i__[pos__++];
            check_greater_or_equal(function__, "J", J, 0);
            current_statement_begin__ = 25;
            validate_non_negative_index("X0", "K", K);
            validate_non_negative_index("X0", "J", J);
            context__.validate_dims("data initialization", "X0", "matrix_d", context__.to_vec(K,J));
            X0 = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(K, J);
            vals_r__ = context__.vals_r("X0");
            pos__ = 0;
            size_t X0_j_2_max__ = J;
            size_t X0_j_1_max__ = K;
            for (size_t j_2__ = 0; j_2__ < X0_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X0_j_1_max__; ++j_1__) {
                    X0(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 26;
            context__.validate_dims("data initialization", "T_post", "int", context__.to_vec());
            T_post = int(0);
            vals_i__ = context__.vals_i("T_post");
            pos__ = 0;
            T_post = vals_i__[pos__++];
            check_greater_or_equal(function__, "T_post", T_post, 1);
            current_statement_begin__ = 27;
            validate_non_negative_index("X0_pred", "T_post", T_post);
            validate_non_negative_index("X0_pred", "J", J);
            context__.validate_dims("data initialization", "X0_pred", "matrix_d", context__.to_vec(T_post,J));
            X0_pred = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(T_post, J);
            vals_r__ = context__.vals_r("X0_pred");
            pos__ = 0;
            size_t X0_pred_j_2_max__ = J;
            size_t X0_pred_j_1_max__ = T_post;
            for (size_t j_2__ = 0; j_2__ < X0_pred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X0_pred_j_1_max__; ++j_1__) {
                    X0_pred(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 28;
            validate_non_negative_index("vs", "K", K);
            context__.validate_dims("data initialization", "vs", "vector_d", context__.to_vec(K));
            vs = Eigen::Matrix<double, Eigen::Dynamic, 1>(K);
            vals_r__ = context__.vals_r("vs");
            pos__ = 0;
            size_t vs_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < vs_j_1_max__; ++j_1__) {
                vs(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "vs", vs, 0);
            // initialize transformed data variables
            current_statement_begin__ = 33;
            validate_non_negative_index("X0_std", "K", K);
            validate_non_negative_index("X0_std", "J", J);
            X0_std = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(K, J);
            stan::math::fill(X0_std, DUMMY_VAR__);
            current_statement_begin__ = 34;
            validate_non_negative_index("X0_pred_std", "T_post", T_post);
            validate_non_negative_index("X0_pred_std", "J", J);
            X0_pred_std = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(T_post, J);
            stan::math::fill(X0_pred_std, DUMMY_VAR__);
            current_statement_begin__ = 35;
            validate_non_negative_index("mean_X0", "J", J);
            mean_X0 = Eigen::Matrix<double, Eigen::Dynamic, 1>(J);
            stan::math::fill(mean_X0, DUMMY_VAR__);
            current_statement_begin__ = 36;
            validate_non_negative_index("sd_X0", "J", J);
            sd_X0 = Eigen::Matrix<double, Eigen::Dynamic, 1>(J);
            stan::math::fill(sd_X0, DUMMY_VAR__);
            current_statement_begin__ = 37;
            mean_X1 = double(0);
            stan::math::fill(mean_X1, DUMMY_VAR__);
            stan::math::assign(mean_X1,mean(X1));
            current_statement_begin__ = 38;
            sd_X1 = double(0);
            stan::math::fill(sd_X1, DUMMY_VAR__);
            stan::math::assign(sd_X1,sd(X1));
            current_statement_begin__ = 39;
            validate_non_negative_index("X1_std", "K", K);
            X1_std = Eigen::Matrix<double, Eigen::Dynamic, 1>(K);
            stan::math::fill(X1_std, DUMMY_VAR__);
            stan::math::assign(X1_std,divide(subtract(X1, mean_X1), sd_X1));
            current_statement_begin__ = 40;
            validate_non_negative_index("vs_std", "K", K);
            vs_std = Eigen::Matrix<double, Eigen::Dynamic, 1>(K);
            stan::math::fill(vs_std, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 41;
            for (int k = 1; k <= K; ++k) {
                current_statement_begin__ = 42;
                stan::model::assign(vs_std, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                            pow(sd(stan::model::rvalue(X0, stan::model::cons_list(stan::model::index_uni(k), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X0")), -(1)), 
                            "assigning variable vs_std");
            }
            current_statement_begin__ = 44;
            for (int j = 1; j <= J; ++j) {
                current_statement_begin__ = 45;
                stan::model::assign(mean_X0, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            mean(stan::model::rvalue(X0, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), "X0")), 
                            "assigning variable mean_X0");
                current_statement_begin__ = 46;
                stan::model::assign(sd_X0, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            sd(stan::model::rvalue(X0, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), "X0")), 
                            "assigning variable sd_X0");
                current_statement_begin__ = 47;
                stan::model::assign(X0_std, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            divide(subtract(stan::model::rvalue(X0, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), "X0"), get_base1(mean_X0, j, "mean_X0", 1)), get_base1(sd_X0, j, "sd_X0", 1)), 
                            "assigning variable X0_std");
                current_statement_begin__ = 48;
                stan::model::assign(X0_pred_std, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            divide(subtract(stan::model::rvalue(X0_pred, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), "X0_pred"), get_base1(mean_X0, j, "mean_X0", 1)), get_base1(sd_X0, j, "sd_X0", 1)), 
                            "assigning variable X0_pred_std");
            }
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 53;
            num_params_r__ += 1;
            current_statement_begin__ = 54;
            validate_non_negative_index("w", "J", J);
            num_params_r__ += (J - 1);
            current_statement_begin__ = 55;
            validate_non_negative_index("gamma", "K", K);
            num_params_r__ += (K - 1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_model1_gammaOmega() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 53;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 54;
        if (!(context__.contains_r("w")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable w missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("w");
        pos__ = 0U;
        validate_non_negative_index("w", "J", J);
        context__.validate_dims("parameter initialization", "w", "vector_d", context__.to_vec(J));
        Eigen::Matrix<double, Eigen::Dynamic, 1> w(J);
        size_t w_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < w_j_1_max__; ++j_1__) {
            w(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.simplex_unconstrain(w);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable w: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 55;
        if (!(context__.contains_r("gamma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gamma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gamma");
        pos__ = 0U;
        validate_non_negative_index("gamma", "K", K);
        context__.validate_dims("parameter initialization", "gamma", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> gamma(K);
        size_t gamma_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
            gamma(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.simplex_unconstrain(gamma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gamma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 53;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lb_constrain(0, lp__);
            else
                sigma = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 54;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> w;
            (void) w;  // dummy to suppress unused var warning
            if (jacobian__)
                w = in__.simplex_constrain(J, lp__);
            else
                w = in__.simplex_constrain(J);
            current_statement_begin__ = 55;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> gamma;
            (void) gamma;  // dummy to suppress unused var warning
            if (jacobian__)
                gamma = in__.simplex_constrain(K, lp__);
            else
                gamma = in__.simplex_constrain(K);
            // transformed parameters
            current_statement_begin__ = 61;
            validate_non_negative_index("Omega", "K", K);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Omega(K);
            stan::math::initialize(Omega, DUMMY_VAR__);
            stan::math::fill(Omega, DUMMY_VAR__);
            current_statement_begin__ = 62;
            validate_non_negative_index("Gamma", "K", K);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Gamma(K);
            stan::math::initialize(Gamma, DUMMY_VAR__);
            stan::math::fill(Gamma, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 63;
            for (int k = 1; k <= K; ++k) {
                current_statement_begin__ = 64;
                stan::model::assign(Gamma, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                            pow(get_base1(gamma, k, "gamma", 1), -(1)), 
                            "assigning variable Gamma");
            }
            current_statement_begin__ = 66;
            stan::math::assign(Omega, multiply(sigma, Gamma));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 61;
            size_t Omega_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < Omega_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(Omega(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: Omega" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Omega: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 62;
            size_t Gamma_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < Gamma_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(Gamma(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: Gamma" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Gamma: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 71;
            lp_accum__.add(normal_log<propto__>(sigma, 0, 1));
            current_statement_begin__ = 72;
            lp_accum__.add(dirichlet_log<propto__>(gamma, vs_std));
            current_statement_begin__ = 73;
            lp_accum__.add(normal_log(X1_std, multiply(X0_std, w), Omega));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("sigma");
        names__.push_back("w");
        names__.push_back("gamma");
        names__.push_back("Omega");
        names__.push_back("Gamma");
        names__.push_back("X1_sim");
        names__.push_back("X1_pred");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T_post);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_model1_gammaOmega_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma);
        Eigen::Matrix<double, Eigen::Dynamic, 1> w = in__.simplex_constrain(J);
        size_t w_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < w_j_1_max__; ++j_1__) {
            vars__.push_back(w(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> gamma = in__.simplex_constrain(K);
        size_t gamma_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
            vars__.push_back(gamma(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 61;
            validate_non_negative_index("Omega", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, 1> Omega(K);
            stan::math::initialize(Omega, DUMMY_VAR__);
            stan::math::fill(Omega, DUMMY_VAR__);
            current_statement_begin__ = 62;
            validate_non_negative_index("Gamma", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, 1> Gamma(K);
            stan::math::initialize(Gamma, DUMMY_VAR__);
            stan::math::fill(Gamma, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 63;
            for (int k = 1; k <= K; ++k) {
                current_statement_begin__ = 64;
                stan::model::assign(Gamma, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                            pow(get_base1(gamma, k, "gamma", 1), -(1)), 
                            "assigning variable Gamma");
            }
            current_statement_begin__ = 66;
            stan::math::assign(Omega, multiply(sigma, Gamma));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t Omega_j_1_max__ = K;
                for (size_t j_1__ = 0; j_1__ < Omega_j_1_max__; ++j_1__) {
                    vars__.push_back(Omega(j_1__));
                }
                size_t Gamma_j_1_max__ = K;
                for (size_t j_1__ = 0; j_1__ < Gamma_j_1_max__; ++j_1__) {
                    vars__.push_back(Gamma(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 77;
            validate_non_negative_index("X1_sim", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, 1> X1_sim(K);
            stan::math::initialize(X1_sim, DUMMY_VAR__);
            stan::math::fill(X1_sim, DUMMY_VAR__);
            current_statement_begin__ = 78;
            validate_non_negative_index("X1_pred", "T_post", T_post);
            Eigen::Matrix<double, Eigen::Dynamic, 1> X1_pred(T_post);
            stan::math::initialize(X1_pred, DUMMY_VAR__);
            stan::math::fill(X1_pred, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 79;
            for (int i = 1; i <= K; ++i) {
                current_statement_begin__ = 80;
                stan::model::assign(X1_sim, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((normal_rng(multiply(stan::model::rvalue(X0_std, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X0_std"), w), sigma, base_rng__) * sd_X1) + mean_X1), 
                            "assigning variable X1_sim");
            }
            current_statement_begin__ = 83;
            for (int j = 1; j <= T_post; ++j) {
                current_statement_begin__ = 84;
                stan::model::assign(X1_pred, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            ((normal_rng(multiply(stan::model::rvalue(X0_pred_std, stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X0_pred_std"), w), sigma, base_rng__) * sd_X1) + mean_X1), 
                            "assigning variable X1_pred");
            }
            // validate, write generated quantities
            current_statement_begin__ = 77;
            size_t X1_sim_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < X1_sim_j_1_max__; ++j_1__) {
                vars__.push_back(X1_sim(j_1__));
            }
            current_statement_begin__ = 78;
            size_t X1_pred_j_1_max__ = T_post;
            for (size_t j_1__ = 0; j_1__ < X1_pred_j_1_max__; ++j_1__) {
                vars__.push_back(X1_pred(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_model1_gammaOmega";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        size_t w_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < w_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "w" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t Omega_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < Omega_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Omega" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t Gamma_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < Gamma_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Gamma" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t X1_sim_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < X1_sim_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "X1_sim" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t X1_pred_j_1_max__ = T_post;
        for (size_t j_1__ = 0; j_1__ < X1_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "X1_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        size_t w_j_1_max__ = (J - 1);
        for (size_t j_1__ = 0; j_1__ < w_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "w" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_j_1_max__ = (K - 1);
        for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t Omega_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < Omega_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Omega" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t Gamma_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < Gamma_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Gamma" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t X1_sim_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < X1_sim_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "X1_sim" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t X1_pred_j_1_max__ = T_post;
        for (size_t j_1__ = 0; j_1__ < X1_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "X1_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_model1_gammaOmega_namespace::model_model1_gammaOmega stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
