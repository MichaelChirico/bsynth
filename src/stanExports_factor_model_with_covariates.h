// Generated by rstantools.  Do not edit by hand.

#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_factor_model_with_covariates_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_factor_model_with_covariates");
    reader.add_event(24, 24, "include", "factor_functions.stan");
    reader.add_event(24, 0, "start", "factor_functions.stan");
    reader.add_event(96, 72, "end", "factor_functions.stan");
    reader.add_event(96, 25, "restart", "model_factor_model_with_covariates");
    reader.add_event(211, 138, "end", "model_factor_model_with_covariates");
    return reader;
}
template <typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__>::type, Eigen::Dynamic, Eigen::Dynamic>
make_F(const int& T,
           const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& diagonal_loadings,
           const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& lower_tri_loadings, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 51;
        int L(0);
        (void) L;  // dummy to suppress unused var warning
        stan::math::fill(L, std::numeric_limits<int>::min());
        stan::math::assign(L,num_elements(diagonal_loadings));
        current_statement_begin__ = 52;
        int M(0);
        (void) M;  // dummy to suppress unused var warning
        stan::math::fill(M, std::numeric_limits<int>::min());
        stan::math::assign(M,num_elements(lower_tri_loadings));
        current_statement_begin__ = 53;
        validate_non_negative_index("F", "T", T);
        validate_non_negative_index("F", "L", L);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> F(T, L);
        stan::math::initialize(F, DUMMY_VAR__);
        stan::math::fill(F, DUMMY_VAR__);
        current_statement_begin__ = 55;
        int idx(0);
        (void) idx;  // dummy to suppress unused var warning
        stan::math::fill(idx, std::numeric_limits<int>::min());
        stan::math::assign(idx,0);
        current_statement_begin__ = 57;
        for (int j = 1; j <= L; ++j) {
            current_statement_begin__ = 58;
            stan::model::assign(F, 
                        stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                        get_base1(diagonal_loadings, j, "diagonal_loadings", 1), 
                        "assigning variable F");
            current_statement_begin__ = 59;
            for (int i = (j + 1); i <= T; ++i) {
                current_statement_begin__ = 60;
                stan::math::assign(idx, (idx + 1));
                current_statement_begin__ = 61;
                stan::model::assign(F, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            get_base1(lower_tri_loadings, idx, "lower_tri_loadings", 1), 
                            "assigning variable F");
            }
        }
        current_statement_begin__ = 64;
        for (int j = 1; j <= (L - 1); ++j) {
            current_statement_begin__ = 65;
            for (int i = (j + 1); i <= L; ++i) {
                current_statement_begin__ = 65;
                stan::model::assign(F, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            0, 
                            "assigning variable F");
            }
        }
        current_statement_begin__ = 68;
        return stan::math::promote_scalar<fun_return_scalar_t__>(F);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct make_F_functor__ {
    template <typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const int& T,
           const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& diagonal_loadings,
           const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& lower_tri_loadings, std::ostream* pstream__) const {
        return make_F(T, diagonal_loadings, lower_tri_loadings, pstream__);
    }
};
template <typename T1__, typename T2__, typename T3__, typename T4__>
Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__>::type, Eigen::Dynamic, Eigen::Dynamic>
make_beta(const int& J,
              const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& off,
              const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& lambda,
              const T3__& eta,
              const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& tau, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 84;
        int L(0);
        (void) L;  // dummy to suppress unused var warning
        stan::math::fill(L, std::numeric_limits<int>::min());
        stan::math::assign(L,cols(off));
        current_statement_begin__ = 85;
        validate_non_negative_index("cache", "L", L);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> cache(L);
        stan::math::initialize(cache, DUMMY_VAR__);
        stan::math::fill(cache, DUMMY_VAR__);
        stan::math::assign(cache,multiply(stan::math::tan(multiply((0.5 * stan::math::pi()), lambda)), stan::math::tan(((0.5 * stan::math::pi()) * eta))));
        current_statement_begin__ = 88;
        validate_non_negative_index("tau_", "J", J);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> tau_(J);
        stan::math::initialize(tau_, DUMMY_VAR__);
        stan::math::fill(tau_, DUMMY_VAR__);
        stan::math::assign(tau_,stan::math::tan(multiply((0.5 * stan::math::pi()), tau)));
        current_statement_begin__ = 89;
        validate_non_negative_index("out", "J", J);
        validate_non_negative_index("out", "L", L);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> out(J, L);
        stan::math::initialize(out, DUMMY_VAR__);
        stan::math::fill(out, DUMMY_VAR__);
        current_statement_begin__ = 91;
        for (int j = 1; j <= J; ++j) {
            current_statement_begin__ = 92;
            stan::model::assign(out, 
                        stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                        multiply(get_base1(off, j, "off", 1), get_base1(tau_, j, "tau_", 1)), 
                        "assigning variable out");
        }
        current_statement_begin__ = 94;
        return stan::math::promote_scalar<fun_return_scalar_t__>(diag_pre_multiply(cache, transpose(out)));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct make_beta_functor__ {
    template <typename T1__, typename T2__, typename T3__, typename T4__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const int& J,
              const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& off,
              const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& lambda,
              const T3__& eta,
              const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& tau, std::ostream* pstream__) const {
        return make_beta(J, off, lambda, eta, tau, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_factor_model_with_covariates
  : public stan::model::model_base_crtp<model_factor_model_with_covariates> {
private:
        int L;
        int N;
        row_vector_d y_treated_pre;
        int J;
        std::vector<row_vector_d> y_donors_pre;
        int N_pred;
        std::vector<row_vector_d> y_donors_post;
        int T;
        int j_plus_1;
        int M;
        row_vector_d j_ones;
        vector_d t_ones;
        std::vector<row_vector_d> y_donors;
        std::vector<row_vector_d> y_donors_pre_std;
        std::vector<row_vector_d> y_donors_post_std;
        vector_d mean_y_donors_pre;
        vector_d sd_y_donors_pre;
        double mean_y;
        double sd_y;
        row_vector_d y_std;
public:
    model_factor_model_with_covariates(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_factor_model_with_covariates(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_factor_model_with_covariates_namespace::model_factor_model_with_covariates";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 99;
            context__.validate_dims("data initialization", "L", "int", context__.to_vec());
            L = int(0);
            vals_i__ = context__.vals_i("L");
            pos__ = 0;
            L = vals_i__[pos__++];
            check_greater_or_equal(function__, "L", L, 2);
            current_statement_begin__ = 100;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);
            current_statement_begin__ = 101;
            validate_non_negative_index("y_treated_pre", "N", N);
            context__.validate_dims("data initialization", "y_treated_pre", "row_vector_d", context__.to_vec(N));
            y_treated_pre = Eigen::Matrix<double, 1, Eigen::Dynamic>(N);
            vals_r__ = context__.vals_r("y_treated_pre");
            pos__ = 0;
            size_t y_treated_pre_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < y_treated_pre_j_1_max__; ++j_1__) {
                y_treated_pre(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 103;
            context__.validate_dims("data initialization", "J", "int", context__.to_vec());
            J = int(0);
            vals_i__ = context__.vals_i("J");
            pos__ = 0;
            J = vals_i__[pos__++];
            check_greater_or_equal(function__, "J", J, 0);
            current_statement_begin__ = 104;
            validate_non_negative_index("y_donors_pre", "N", N);
            validate_non_negative_index("y_donors_pre", "J", J);
            context__.validate_dims("data initialization", "y_donors_pre", "row_vector_d", context__.to_vec(J,N));
            y_donors_pre = std::vector<Eigen::Matrix<double, 1, Eigen::Dynamic> >(J, Eigen::Matrix<double, 1, Eigen::Dynamic>(N));
            vals_r__ = context__.vals_r("y_donors_pre");
            pos__ = 0;
            size_t y_donors_pre_j_1_max__ = N;
            size_t y_donors_pre_k_0_max__ = J;
            for (size_t j_1__ = 0; j_1__ < y_donors_pre_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < y_donors_pre_k_0_max__; ++k_0__) {
                    y_donors_pre[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 106;
            context__.validate_dims("data initialization", "N_pred", "int", context__.to_vec());
            N_pred = int(0);
            vals_i__ = context__.vals_i("N_pred");
            pos__ = 0;
            N_pred = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_pred", N_pred, 1);
            current_statement_begin__ = 107;
            validate_non_negative_index("y_donors_post", "N_pred", N_pred);
            validate_non_negative_index("y_donors_post", "J", J);
            context__.validate_dims("data initialization", "y_donors_post", "row_vector_d", context__.to_vec(J,N_pred));
            y_donors_post = std::vector<Eigen::Matrix<double, 1, Eigen::Dynamic> >(J, Eigen::Matrix<double, 1, Eigen::Dynamic>(N_pred));
            vals_r__ = context__.vals_r("y_donors_post");
            pos__ = 0;
            size_t y_donors_post_j_1_max__ = N_pred;
            size_t y_donors_post_k_0_max__ = J;
            for (size_t j_1__ = 0; j_1__ < y_donors_post_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < y_donors_post_k_0_max__; ++k_0__) {
                    y_donors_post[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            // initialize transformed data variables
            current_statement_begin__ = 112;
            T = int(0);
            stan::math::fill(T, std::numeric_limits<int>::min());
            stan::math::assign(T,(N + N_pred));
            current_statement_begin__ = 113;
            j_plus_1 = int(0);
            stan::math::fill(j_plus_1, std::numeric_limits<int>::min());
            stan::math::assign(j_plus_1,(J + 1));
            current_statement_begin__ = 114;
            M = int(0);
            stan::math::fill(M, std::numeric_limits<int>::min());
            stan::math::assign(M,((L * (T - L)) + divide((L * (L - 1)), 2)));
            current_statement_begin__ = 115;
            validate_non_negative_index("j_ones", "j_plus_1", j_plus_1);
            j_ones = Eigen::Matrix<double, 1, Eigen::Dynamic>(j_plus_1);
            stan::math::fill(j_ones, DUMMY_VAR__);
            stan::math::assign(j_ones,rep_row_vector(1, j_plus_1));
            current_statement_begin__ = 116;
            validate_non_negative_index("t_ones", "T", T);
            t_ones = Eigen::Matrix<double, Eigen::Dynamic, 1>(T);
            stan::math::fill(t_ones, DUMMY_VAR__);
            stan::math::assign(t_ones,rep_vector(1.0, T));
            current_statement_begin__ = 118;
            validate_non_negative_index("y_donors", "T", T);
            validate_non_negative_index("y_donors", "J", J);
            y_donors = std::vector<Eigen::Matrix<double, 1, Eigen::Dynamic> >(J, Eigen::Matrix<double, 1, Eigen::Dynamic>(T));
            stan::math::fill(y_donors, DUMMY_VAR__);
            current_statement_begin__ = 121;
            validate_non_negative_index("y_donors_pre_std", "N", N);
            validate_non_negative_index("y_donors_pre_std", "J", J);
            y_donors_pre_std = std::vector<Eigen::Matrix<double, 1, Eigen::Dynamic> >(J, Eigen::Matrix<double, 1, Eigen::Dynamic>(N));
            stan::math::fill(y_donors_pre_std, DUMMY_VAR__);
            current_statement_begin__ = 122;
            validate_non_negative_index("y_donors_post_std", "N_pred", N_pred);
            validate_non_negative_index("y_donors_post_std", "J", J);
            y_donors_post_std = std::vector<Eigen::Matrix<double, 1, Eigen::Dynamic> >(J, Eigen::Matrix<double, 1, Eigen::Dynamic>(N_pred));
            stan::math::fill(y_donors_post_std, DUMMY_VAR__);
            current_statement_begin__ = 123;
            validate_non_negative_index("mean_y_donors_pre", "J", J);
            mean_y_donors_pre = Eigen::Matrix<double, Eigen::Dynamic, 1>(J);
            stan::math::fill(mean_y_donors_pre, DUMMY_VAR__);
            current_statement_begin__ = 124;
            validate_non_negative_index("sd_y_donors_pre", "J", J);
            sd_y_donors_pre = Eigen::Matrix<double, Eigen::Dynamic, 1>(J);
            stan::math::fill(sd_y_donors_pre, DUMMY_VAR__);
            current_statement_begin__ = 125;
            mean_y = double(0);
            stan::math::fill(mean_y, DUMMY_VAR__);
            stan::math::assign(mean_y,mean(y_treated_pre));
            current_statement_begin__ = 126;
            sd_y = double(0);
            stan::math::fill(sd_y, DUMMY_VAR__);
            stan::math::assign(sd_y,sd(y_treated_pre));
            current_statement_begin__ = 127;
            validate_non_negative_index("y_std", "N", N);
            y_std = Eigen::Matrix<double, 1, Eigen::Dynamic>(N);
            stan::math::fill(y_std, DUMMY_VAR__);
            stan::math::assign(y_std,divide(subtract(y_treated_pre, mean_y), sd_y));
            // execute transformed data statements
            current_statement_begin__ = 129;
            for (int j = 1; j <= J; ++j) {
                current_statement_begin__ = 130;
                stan::model::assign(mean_y_donors_pre, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            mean(get_base1(y_donors_pre, j, "y_donors_pre", 1)), 
                            "assigning variable mean_y_donors_pre");
                current_statement_begin__ = 131;
                stan::model::assign(sd_y_donors_pre, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            sd(get_base1(y_donors_pre, j, "y_donors_pre", 1)), 
                            "assigning variable sd_y_donors_pre");
                current_statement_begin__ = 132;
                stan::model::assign(y_donors_pre_std, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            divide(subtract(get_base1(y_donors_pre, j, "y_donors_pre", 1), get_base1(mean_y_donors_pre, j, "mean_y_donors_pre", 1)), get_base1(sd_y_donors_pre, j, "sd_y_donors_pre", 1)), 
                            "assigning variable y_donors_pre_std");
                current_statement_begin__ = 134;
                stan::model::assign(y_donors_post_std, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            divide(subtract(get_base1(y_donors_post, j, "y_donors_post", 1), get_base1(mean_y_donors_pre, j, "mean_y_donors_pre", 1)), get_base1(sd_y_donors_pre, j, "sd_y_donors_pre", 1)), 
                            "assigning variable y_donors_post_std");
                current_statement_begin__ = 136;
                stan::model::assign(y_donors, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            append_col(get_base1(y_donors_pre_std, j, "y_donors_pre_std", 1), get_base1(y_donors_post_std, j, "y_donors_post_std", 1)), 
                            "assigning variable y_donors");
            }
            // validate transformed data
            current_statement_begin__ = 114;
            check_greater_or_equal(function__, "M", M, 1);
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 142;
            validate_non_negative_index("raw_b", "T", T);
            num_params_r__ += T;
            current_statement_begin__ = 143;
            num_params_r__ += 1;
            current_statement_begin__ = 144;
            validate_non_negative_index("raw_c", "j_plus_1", j_plus_1);
            num_params_r__ += j_plus_1;
            current_statement_begin__ = 145;
            num_params_r__ += 1;
            current_statement_begin__ = 147;
            validate_non_negative_index("beta_off", "j_plus_1", j_plus_1);
            validate_non_negative_index("beta_off", "L", L);
            num_params_r__ += (j_plus_1 * L);
            current_statement_begin__ = 148;
            validate_non_negative_index("lambda", "L", L);
            num_params_r__ += L;
            current_statement_begin__ = 149;
            num_params_r__ += 1;
            current_statement_begin__ = 150;
            validate_non_negative_index("tau", "j_plus_1", j_plus_1);
            num_params_r__ += j_plus_1;
            current_statement_begin__ = 152;
            validate_non_negative_index("y_missing", "N_pred", N_pred);
            num_params_r__ += N_pred;
            current_statement_begin__ = 154;
            num_params_r__ += 1;
            current_statement_begin__ = 156;
            validate_non_negative_index("F_diag", "L", L);
            num_params_r__ += L;
            current_statement_begin__ = 157;
            validate_non_negative_index("F_lower", "M", M);
            num_params_r__ += M;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_factor_model_with_covariates() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 142;
        if (!(context__.contains_r("raw_b")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable raw_b missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("raw_b");
        pos__ = 0U;
        validate_non_negative_index("raw_b", "T", T);
        context__.validate_dims("parameter initialization", "raw_b", "vector_d", context__.to_vec(T));
        Eigen::Matrix<double, Eigen::Dynamic, 1> raw_b(T);
        size_t raw_b_j_1_max__ = T;
        for (size_t j_1__ = 0; j_1__ < raw_b_j_1_max__; ++j_1__) {
            raw_b(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(raw_b);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable raw_b: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 143;
        if (!(context__.contains_r("sigma_b")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_b missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_b");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_b", "double", context__.to_vec());
        double sigma_b(0);
        sigma_b = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_b);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_b: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 144;
        if (!(context__.contains_r("raw_c")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable raw_c missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("raw_c");
        pos__ = 0U;
        validate_non_negative_index("raw_c", "j_plus_1", j_plus_1);
        context__.validate_dims("parameter initialization", "raw_c", "row_vector_d", context__.to_vec(j_plus_1));
        Eigen::Matrix<double, 1, Eigen::Dynamic> raw_c(j_plus_1);
        size_t raw_c_j_1_max__ = j_plus_1;
        for (size_t j_1__ = 0; j_1__ < raw_c_j_1_max__; ++j_1__) {
            raw_c(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.row_vector_unconstrain(raw_c);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable raw_c: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 145;
        if (!(context__.contains_r("sigma_c")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_c missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_c");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_c", "double", context__.to_vec());
        double sigma_c(0);
        sigma_c = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_c);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_c: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 147;
        if (!(context__.contains_r("beta_off")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_off missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_off");
        pos__ = 0U;
        validate_non_negative_index("beta_off", "j_plus_1", j_plus_1);
        validate_non_negative_index("beta_off", "L", L);
        context__.validate_dims("parameter initialization", "beta_off", "matrix_d", context__.to_vec(j_plus_1,L));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> beta_off(j_plus_1, L);
        size_t beta_off_j_2_max__ = L;
        size_t beta_off_j_1_max__ = j_plus_1;
        for (size_t j_2__ = 0; j_2__ < beta_off_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_off_j_1_max__; ++j_1__) {
                beta_off(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(beta_off);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_off: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 148;
        if (!(context__.contains_r("lambda")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda");
        pos__ = 0U;
        validate_non_negative_index("lambda", "L", L);
        context__.validate_dims("parameter initialization", "lambda", "vector_d", context__.to_vec(L));
        Eigen::Matrix<double, Eigen::Dynamic, 1> lambda(L);
        size_t lambda_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
            lambda(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(0, 1, lambda);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 149;
        if (!(context__.contains_r("eta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable eta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("eta");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "eta", "double", context__.to_vec());
        double eta(0);
        eta = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, eta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable eta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 150;
        if (!(context__.contains_r("tau")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        validate_non_negative_index("tau", "j_plus_1", j_plus_1);
        context__.validate_dims("parameter initialization", "tau", "vector_d", context__.to_vec(j_plus_1));
        Eigen::Matrix<double, Eigen::Dynamic, 1> tau(j_plus_1);
        size_t tau_j_1_max__ = j_plus_1;
        for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
            tau(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(0, 1, tau);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 152;
        if (!(context__.contains_r("y_missing")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable y_missing missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("y_missing");
        pos__ = 0U;
        validate_non_negative_index("y_missing", "N_pred", N_pred);
        context__.validate_dims("parameter initialization", "y_missing", "row_vector_d", context__.to_vec(N_pred));
        Eigen::Matrix<double, 1, Eigen::Dynamic> y_missing(N_pred);
        size_t y_missing_j_1_max__ = N_pred;
        for (size_t j_1__ = 0; j_1__ < y_missing_j_1_max__; ++j_1__) {
            y_missing(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.row_vector_unconstrain(y_missing);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable y_missing: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 154;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 156;
        if (!(context__.contains_r("F_diag")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable F_diag missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("F_diag");
        pos__ = 0U;
        validate_non_negative_index("F_diag", "L", L);
        context__.validate_dims("parameter initialization", "F_diag", "vector_d", context__.to_vec(L));
        Eigen::Matrix<double, Eigen::Dynamic, 1> F_diag(L);
        size_t F_diag_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < F_diag_j_1_max__; ++j_1__) {
            F_diag(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, F_diag);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable F_diag: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 157;
        if (!(context__.contains_r("F_lower")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable F_lower missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("F_lower");
        pos__ = 0U;
        validate_non_negative_index("F_lower", "M", M);
        context__.validate_dims("parameter initialization", "F_lower", "vector_d", context__.to_vec(M));
        Eigen::Matrix<double, Eigen::Dynamic, 1> F_lower(M);
        size_t F_lower_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < F_lower_j_1_max__; ++j_1__) {
            F_lower(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(F_lower);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable F_lower: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 142;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> raw_b;
            (void) raw_b;  // dummy to suppress unused var warning
            if (jacobian__)
                raw_b = in__.vector_constrain(T, lp__);
            else
                raw_b = in__.vector_constrain(T);
            current_statement_begin__ = 143;
            local_scalar_t__ sigma_b;
            (void) sigma_b;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_b = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_b = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 144;
            Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> raw_c;
            (void) raw_c;  // dummy to suppress unused var warning
            if (jacobian__)
                raw_c = in__.row_vector_constrain(j_plus_1, lp__);
            else
                raw_c = in__.row_vector_constrain(j_plus_1);
            current_statement_begin__ = 145;
            local_scalar_t__ sigma_c;
            (void) sigma_c;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_c = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_c = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 147;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> beta_off;
            (void) beta_off;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_off = in__.matrix_constrain(j_plus_1, L, lp__);
            else
                beta_off = in__.matrix_constrain(j_plus_1, L);
            current_statement_begin__ = 148;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda;
            (void) lambda;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda = in__.vector_lub_constrain(0, 1, L, lp__);
            else
                lambda = in__.vector_lub_constrain(0, 1, L);
            current_statement_begin__ = 149;
            local_scalar_t__ eta;
            (void) eta;  // dummy to suppress unused var warning
            if (jacobian__)
                eta = in__.scalar_lub_constrain(0, 1, lp__);
            else
                eta = in__.scalar_lub_constrain(0, 1);
            current_statement_begin__ = 150;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> tau;
            (void) tau;  // dummy to suppress unused var warning
            if (jacobian__)
                tau = in__.vector_lub_constrain(0, 1, j_plus_1, lp__);
            else
                tau = in__.vector_lub_constrain(0, 1, j_plus_1);
            current_statement_begin__ = 152;
            Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> y_missing;
            (void) y_missing;  // dummy to suppress unused var warning
            if (jacobian__)
                y_missing = in__.row_vector_constrain(N_pred, lp__);
            else
                y_missing = in__.row_vector_constrain(N_pred);
            current_statement_begin__ = 154;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lb_constrain(0, lp__);
            else
                sigma = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 156;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> F_diag;
            (void) F_diag;  // dummy to suppress unused var warning
            if (jacobian__)
                F_diag = in__.vector_lb_constrain(0, L, lp__);
            else
                F_diag = in__.vector_lb_constrain(0, L);
            current_statement_begin__ = 157;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> F_lower;
            (void) F_lower;  // dummy to suppress unused var warning
            if (jacobian__)
                F_lower = in__.vector_constrain(M, lp__);
            else
                F_lower = in__.vector_constrain(M);
            // transformed parameters
            current_statement_begin__ = 162;
            validate_non_negative_index("beta", "L", L);
            validate_non_negative_index("beta", "j_plus_1", j_plus_1);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> beta(L, j_plus_1);
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            stan::math::assign(beta,make_beta(j_plus_1, beta_off, lambda, eta, tau, pstream__));
            current_statement_begin__ = 167;
            validate_non_negative_index("b", "T", T);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b(T);
            stan::math::initialize(b, DUMMY_VAR__);
            stan::math::fill(b, DUMMY_VAR__);
            stan::math::assign(b,multiply(raw_b, sigma_b));
            current_statement_begin__ = 168;
            validate_non_negative_index("c", "j_plus_1", j_plus_1);
            Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> c(j_plus_1);
            stan::math::initialize(c, DUMMY_VAR__);
            stan::math::fill(c, DUMMY_VAR__);
            stan::math::assign(c,multiply(raw_c, sigma_c));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 162;
            size_t beta_j_1_max__ = L;
            size_t beta_j_2_max__ = j_plus_1;
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < beta_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(beta(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: beta" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable beta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 167;
            size_t b_j_1_max__ = T;
            for (size_t j_1__ = 0; j_1__ < b_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(b(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: b" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable b: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 168;
            size_t c_j_1_max__ = j_plus_1;
            for (size_t j_1__ = 0; j_1__ < c_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(c(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: c" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable c: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 173;
            lp_accum__.add(std_normal_log<propto__>(to_vector(beta_off)));
            current_statement_begin__ = 174;
            lp_accum__.add(std_normal_log<propto__>(F_diag));
            current_statement_begin__ = 175;
            lp_accum__.add(normal_log<propto__>(F_lower, 0, 2));
            current_statement_begin__ = 176;
            lp_accum__.add(std_normal_log<propto__>(raw_b));
            current_statement_begin__ = 177;
            lp_accum__.add(std_normal_log<propto__>(sigma_b));
            current_statement_begin__ = 178;
            lp_accum__.add(std_normal_log<propto__>(raw_c));
            current_statement_begin__ = 179;
            lp_accum__.add(std_normal_log<propto__>(sigma_c));
            current_statement_begin__ = 180;
            lp_accum__.add(std_normal_log<propto__>(sigma));
            {
            current_statement_begin__ = 182;
            validate_non_negative_index("F", "T", T);
            validate_non_negative_index("F", "L", L);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> F(T, L);
            stan::math::initialize(F, DUMMY_VAR__);
            stan::math::fill(F, DUMMY_VAR__);
            stan::math::assign(F,make_F(T, F_diag, F_lower, pstream__));
            current_statement_begin__ = 183;
            validate_non_negative_index("Y_target", "T", T);
            validate_non_negative_index("Y_target", "1", 1);
            std::vector<Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic>  > Y_target(1, Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic>(T));
            stan::math::initialize(Y_target, DUMMY_VAR__);
            stan::math::fill(Y_target, DUMMY_VAR__);
            current_statement_begin__ = 184;
            validate_non_negative_index("Y_temp", "T", T);
            validate_non_negative_index("Y_temp", "j_plus_1", j_plus_1);
            std::vector<Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic>  > Y_temp(j_plus_1, Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic>(T));
            stan::math::initialize(Y_temp, DUMMY_VAR__);
            stan::math::fill(Y_temp, DUMMY_VAR__);
            current_statement_begin__ = 185;
            stan::model::assign(Y_target, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        append_col(y_std, y_missing), 
                        "assigning variable Y_target");
            current_statement_begin__ = 188;
            stan::math::assign(Y_temp, append_array(Y_target, y_donors));
            current_statement_begin__ = 190;
            for (int j = 1; j <= j_plus_1; ++j) {
                current_statement_begin__ = 191;
                lp_accum__.add(normal_id_glm_lpdf<propto__>(transpose(get_base1(Y_temp, j, "Y_temp", 1)), F, add(b, get_base1(c, j, "c", 1)), stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), "beta"), sigma));
            }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("raw_b");
        names__.push_back("sigma_b");
        names__.push_back("raw_c");
        names__.push_back("sigma_c");
        names__.push_back("beta_off");
        names__.push_back("lambda");
        names__.push_back("eta");
        names__.push_back("tau");
        names__.push_back("y_missing");
        names__.push_back("sigma");
        names__.push_back("F_diag");
        names__.push_back("F_lower");
        names__.push_back("beta");
        names__.push_back("b");
        names__.push_back("c");
        names__.push_back("synth_out");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(j_plus_1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(j_plus_1);
        dims__.push_back(L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(j_plus_1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(L);
        dims__.push_back(j_plus_1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(j_plus_1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_factor_model_with_covariates_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> raw_b = in__.vector_constrain(T);
        size_t raw_b_j_1_max__ = T;
        for (size_t j_1__ = 0; j_1__ < raw_b_j_1_max__; ++j_1__) {
            vars__.push_back(raw_b(j_1__));
        }
        double sigma_b = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_b);
        Eigen::Matrix<double, 1, Eigen::Dynamic> raw_c = in__.row_vector_constrain(j_plus_1);
        size_t raw_c_j_1_max__ = j_plus_1;
        for (size_t j_1__ = 0; j_1__ < raw_c_j_1_max__; ++j_1__) {
            vars__.push_back(raw_c(j_1__));
        }
        double sigma_c = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_c);
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> beta_off = in__.matrix_constrain(j_plus_1, L);
        size_t beta_off_j_2_max__ = L;
        size_t beta_off_j_1_max__ = j_plus_1;
        for (size_t j_2__ = 0; j_2__ < beta_off_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_off_j_1_max__; ++j_1__) {
                vars__.push_back(beta_off(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> lambda = in__.vector_lub_constrain(0, 1, L);
        size_t lambda_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
            vars__.push_back(lambda(j_1__));
        }
        double eta = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(eta);
        Eigen::Matrix<double, Eigen::Dynamic, 1> tau = in__.vector_lub_constrain(0, 1, j_plus_1);
        size_t tau_j_1_max__ = j_plus_1;
        for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
            vars__.push_back(tau(j_1__));
        }
        Eigen::Matrix<double, 1, Eigen::Dynamic> y_missing = in__.row_vector_constrain(N_pred);
        size_t y_missing_j_1_max__ = N_pred;
        for (size_t j_1__ = 0; j_1__ < y_missing_j_1_max__; ++j_1__) {
            vars__.push_back(y_missing(j_1__));
        }
        double sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma);
        Eigen::Matrix<double, Eigen::Dynamic, 1> F_diag = in__.vector_lb_constrain(0, L);
        size_t F_diag_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < F_diag_j_1_max__; ++j_1__) {
            vars__.push_back(F_diag(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> F_lower = in__.vector_constrain(M);
        size_t F_lower_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < F_lower_j_1_max__; ++j_1__) {
            vars__.push_back(F_lower(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 162;
            validate_non_negative_index("beta", "L", L);
            validate_non_negative_index("beta", "j_plus_1", j_plus_1);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> beta(L, j_plus_1);
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            stan::math::assign(beta,make_beta(j_plus_1, beta_off, lambda, eta, tau, pstream__));
            current_statement_begin__ = 167;
            validate_non_negative_index("b", "T", T);
            Eigen::Matrix<double, Eigen::Dynamic, 1> b(T);
            stan::math::initialize(b, DUMMY_VAR__);
            stan::math::fill(b, DUMMY_VAR__);
            stan::math::assign(b,multiply(raw_b, sigma_b));
            current_statement_begin__ = 168;
            validate_non_negative_index("c", "j_plus_1", j_plus_1);
            Eigen::Matrix<double, 1, Eigen::Dynamic> c(j_plus_1);
            stan::math::initialize(c, DUMMY_VAR__);
            stan::math::fill(c, DUMMY_VAR__);
            stan::math::assign(c,multiply(raw_c, sigma_c));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t beta_j_2_max__ = j_plus_1;
                size_t beta_j_1_max__ = L;
                for (size_t j_2__ = 0; j_2__ < beta_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                        vars__.push_back(beta(j_1__, j_2__));
                    }
                }
                size_t b_j_1_max__ = T;
                for (size_t j_1__ = 0; j_1__ < b_j_1_max__; ++j_1__) {
                    vars__.push_back(b(j_1__));
                }
                size_t c_j_1_max__ = j_plus_1;
                for (size_t j_1__ = 0; j_1__ < c_j_1_max__; ++j_1__) {
                    vars__.push_back(c(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 199;
            validate_non_negative_index("synth_out", "T", T);
            Eigen::Matrix<double, Eigen::Dynamic, 1> synth_out(T);
            stan::math::initialize(synth_out, DUMMY_VAR__);
            stan::math::fill(synth_out, DUMMY_VAR__);
            // generated quantities statements
            {
            current_statement_begin__ = 201;
            validate_non_negative_index("F_", "T", T);
            validate_non_negative_index("F_", "L", L);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> F_(T, L);
            stan::math::initialize(F_, DUMMY_VAR__);
            stan::math::fill(F_, DUMMY_VAR__);
            stan::math::assign(F_,make_F(T, F_diag, F_lower, pstream__));
            current_statement_begin__ = 202;
            validate_non_negative_index("Synth_", "T", T);
            validate_non_negative_index("Synth_", "j_plus_1", j_plus_1);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Synth_(T, j_plus_1);
            stan::math::initialize(Synth_, DUMMY_VAR__);
            stan::math::fill(Synth_, DUMMY_VAR__);
            stan::math::assign(Synth_,add(add(multiply(F_, beta), multiply(b, j_ones)), multiply(t_ones, c)));
            current_statement_begin__ = 206;
            for (int t = 1; t <= T; ++t) {
                current_statement_begin__ = 207;
                stan::model::assign(synth_out, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            ((normal_rng(get_base1(Synth_, t, 1, "Synth_", 1), sigma, base_rng__) * sd_y) + mean_y), 
                            "assigning variable synth_out");
            }
            }
            // validate, write generated quantities
            current_statement_begin__ = 199;
            size_t synth_out_j_1_max__ = T;
            for (size_t j_1__ = 0; j_1__ < synth_out_j_1_max__; ++j_1__) {
                vars__.push_back(synth_out(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_factor_model_with_covariates";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t raw_b_j_1_max__ = T;
        for (size_t j_1__ = 0; j_1__ < raw_b_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "raw_b" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_b";
        param_names__.push_back(param_name_stream__.str());
        size_t raw_c_j_1_max__ = j_plus_1;
        for (size_t j_1__ = 0; j_1__ < raw_c_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "raw_c" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_c";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_off_j_2_max__ = L;
        size_t beta_off_j_1_max__ = j_plus_1;
        for (size_t j_2__ = 0; j_2__ < beta_off_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_off_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_off" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t lambda_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "eta";
        param_names__.push_back(param_name_stream__.str());
        size_t tau_j_1_max__ = j_plus_1;
        for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t y_missing_j_1_max__ = N_pred;
        for (size_t j_1__ = 0; j_1__ < y_missing_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_missing" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        size_t F_diag_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < F_diag_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "F_diag" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t F_lower_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < F_lower_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "F_lower" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t beta_j_2_max__ = j_plus_1;
            size_t beta_j_1_max__ = L;
            for (size_t j_2__ = 0; j_2__ < beta_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "beta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t b_j_1_max__ = T;
            for (size_t j_1__ = 0; j_1__ < b_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "b" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t c_j_1_max__ = j_plus_1;
            for (size_t j_1__ = 0; j_1__ < c_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "c" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t synth_out_j_1_max__ = T;
        for (size_t j_1__ = 0; j_1__ < synth_out_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "synth_out" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t raw_b_j_1_max__ = T;
        for (size_t j_1__ = 0; j_1__ < raw_b_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "raw_b" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_b";
        param_names__.push_back(param_name_stream__.str());
        size_t raw_c_j_1_max__ = j_plus_1;
        for (size_t j_1__ = 0; j_1__ < raw_c_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "raw_c" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_c";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_off_j_2_max__ = L;
        size_t beta_off_j_1_max__ = j_plus_1;
        for (size_t j_2__ = 0; j_2__ < beta_off_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_off_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_off" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t lambda_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "eta";
        param_names__.push_back(param_name_stream__.str());
        size_t tau_j_1_max__ = j_plus_1;
        for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t y_missing_j_1_max__ = N_pred;
        for (size_t j_1__ = 0; j_1__ < y_missing_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_missing" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        size_t F_diag_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < F_diag_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "F_diag" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t F_lower_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < F_lower_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "F_lower" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t beta_j_2_max__ = j_plus_1;
            size_t beta_j_1_max__ = L;
            for (size_t j_2__ = 0; j_2__ < beta_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "beta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t b_j_1_max__ = T;
            for (size_t j_1__ = 0; j_1__ < b_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "b" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t c_j_1_max__ = j_plus_1;
            for (size_t j_1__ = 0; j_1__ < c_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "c" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t synth_out_j_1_max__ = T;
        for (size_t j_1__ = 0; j_1__ < synth_out_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "synth_out" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_factor_model_with_covariates_namespace::model_factor_model_with_covariates stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
