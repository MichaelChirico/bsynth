// Generated by rstantools.  Do not edit by hand.

#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_model8_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_model8");
    reader.add_event(107, 105, "end", "model_model8");
    return reader;
}
#include <stan_meta_header.hpp>
class model_model8
  : public stan::model::model_base_crtp<model_model8> {
private:
        int N;
        int I;
        std::vector<vector_d> y;
        int K;
        matrix_d X;
        int N_pred;
        matrix_d X_pred;
        matrix_d X_std;
        matrix_d X_pred_std;
        std::vector<vector_d> y_std;
        std::vector<double> mean_y;
        std::vector<double> sd_y;
        std::vector<double> time;
        int sumN;
public:
    model_model8(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_model8(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_model8_namespace::model_model8";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 21;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);
            current_statement_begin__ = 22;
            context__.validate_dims("data initialization", "I", "int", context__.to_vec());
            I = int(0);
            vals_i__ = context__.vals_i("I");
            pos__ = 0;
            I = vals_i__[pos__++];
            check_greater_or_equal(function__, "I", I, 1);
            current_statement_begin__ = 23;
            validate_non_negative_index("y", "N", N);
            validate_non_negative_index("y", "I", I);
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(I,N));
            y = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(I, Eigen::Matrix<double, Eigen::Dynamic, 1>(N));
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = N;
            size_t y_k_0_max__ = I;
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                    y[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 24;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 0);
            current_statement_begin__ = 25;
            validate_non_negative_index("X", "N", N);
            validate_non_negative_index("X", "K", K);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(N,K));
            X = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, K);
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_2_max__ = K;
            size_t X_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    X(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 26;
            context__.validate_dims("data initialization", "N_pred", "int", context__.to_vec());
            N_pred = int(0);
            vals_i__ = context__.vals_i("N_pred");
            pos__ = 0;
            N_pred = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_pred", N_pred, 1);
            current_statement_begin__ = 27;
            validate_non_negative_index("X_pred", "N_pred", N_pred);
            validate_non_negative_index("X_pred", "K", K);
            context__.validate_dims("data initialization", "X_pred", "matrix_d", context__.to_vec(N_pred,K));
            X_pred = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N_pred, K);
            vals_r__ = context__.vals_r("X_pred");
            pos__ = 0;
            size_t X_pred_j_2_max__ = K;
            size_t X_pred_j_1_max__ = N_pred;
            for (size_t j_2__ = 0; j_2__ < X_pred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_pred_j_1_max__; ++j_1__) {
                    X_pred(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            // initialize transformed data variables
            current_statement_begin__ = 31;
            validate_non_negative_index("X_std", "N", N);
            validate_non_negative_index("X_std", "K", K);
            X_std = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, K);
            stan::math::fill(X_std, DUMMY_VAR__);
            current_statement_begin__ = 32;
            validate_non_negative_index("X_pred_std", "N_pred", N_pred);
            validate_non_negative_index("X_pred_std", "K", K);
            X_pred_std = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N_pred, K);
            stan::math::fill(X_pred_std, DUMMY_VAR__);
            current_statement_begin__ = 33;
            validate_non_negative_index("y_std", "N", N);
            validate_non_negative_index("y_std", "I", I);
            y_std = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(I, Eigen::Matrix<double, Eigen::Dynamic, 1>(N));
            stan::math::fill(y_std, DUMMY_VAR__);
            current_statement_begin__ = 34;
            validate_non_negative_index("mean_y", "I", I);
            mean_y = std::vector<double>(I, double(0));
            stan::math::fill(mean_y, DUMMY_VAR__);
            current_statement_begin__ = 35;
            validate_non_negative_index("sd_y", "I", I);
            sd_y = std::vector<double>(I, double(0));
            stan::math::fill(sd_y, DUMMY_VAR__);
            current_statement_begin__ = 36;
            validate_non_negative_index("time", "(N + N_pred)", (N + N_pred));
            time = std::vector<double>((N + N_pred), double(0));
            stan::math::fill(time, DUMMY_VAR__);
            current_statement_begin__ = 37;
            sumN = int(0);
            stan::math::fill(sumN, std::numeric_limits<int>::min());
            stan::math::assign(sumN,(N + N_pred));
            // execute transformed data statements
            current_statement_begin__ = 39;
            for (int t = 1; t <= sumN; ++t) {
                current_statement_begin__ = 40;
                stan::model::assign(time, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            t, 
                            "assigning variable time");
            }
            {
            current_statement_begin__ = 44;
            validate_non_negative_index("mean_X", "K", K);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mean_X(K);
            stan::math::initialize(mean_X, DUMMY_VAR__);
            stan::math::fill(mean_X, DUMMY_VAR__);
            current_statement_begin__ = 45;
            validate_non_negative_index("sd_X", "K", K);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sd_X(K);
            stan::math::initialize(sd_X, DUMMY_VAR__);
            stan::math::fill(sd_X, DUMMY_VAR__);
            current_statement_begin__ = 47;
            for (int k = 1; k <= K; ++k) {
                current_statement_begin__ = 48;
                stan::model::assign(mean_X, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                            mean(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), "X")), 
                            "assigning variable mean_X");
                current_statement_begin__ = 49;
                stan::model::assign(sd_X, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                            sd(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), "X")), 
                            "assigning variable sd_X");
                current_statement_begin__ = 50;
                stan::model::assign(X_std, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), 
                            divide(subtract(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), "X"), get_base1(mean_X, k, "mean_X", 1)), get_base1(sd_X, k, "sd_X", 1)), 
                            "assigning variable X_std");
                current_statement_begin__ = 51;
                stan::model::assign(X_pred_std, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), 
                            divide(subtract(stan::model::rvalue(X_pred, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), "X_pred"), get_base1(mean_X, k, "mean_X", 1)), get_base1(sd_X, k, "sd_X", 1)), 
                            "assigning variable X_pred_std");
            }
            current_statement_begin__ = 54;
            for (int i = 1; i <= I; ++i) {
                current_statement_begin__ = 55;
                stan::model::assign(mean_y, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            mean(get_base1(y, i, "y", 1)), 
                            "assigning variable mean_y");
                current_statement_begin__ = 56;
                stan::model::assign(sd_y, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            sd(get_base1(y, i, "y", 1)), 
                            "assigning variable sd_y");
                current_statement_begin__ = 57;
                stan::model::assign(y_std, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            divide(subtract(get_base1(y, i, "y", 1), get_base1(mean_y, i, "mean_y", 1)), get_base1(sd_y, i, "sd_y", 1)), 
                            "assigning variable y_std");
            }
            }
            // validate transformed data
            current_statement_begin__ = 37;
            check_greater_or_equal(function__, "sumN", sumN, 1);
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 63;
            validate_non_negative_index("sigma", "I", I);
            num_params_r__ += (1 * I);
            current_statement_begin__ = 64;
            validate_non_negative_index("beta", "K", K);
            validate_non_negative_index("beta", "I", I);
            num_params_r__ += ((K - 1) * I);
            current_statement_begin__ = 65;
            validate_non_negative_index("rho", "I", I);
            num_params_r__ += (1 * I);
            current_statement_begin__ = 66;
            validate_non_negative_index("alpha", "I", I);
            num_params_r__ += (1 * I);
            current_statement_begin__ = 67;
            validate_non_negative_index("eta", "sumN", sumN);
            validate_non_negative_index("eta", "I", I);
            num_params_r__ += (sumN * I);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_model8() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 63;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        validate_non_negative_index("sigma", "I", I);
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec(I));
        std::vector<double> sigma(I, double(0));
        size_t sigma_k_0_max__ = I;
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            sigma[k_0__] = vals_r__[pos__++];
        }
        size_t sigma_i_0_max__ = I;
        for (size_t i_0__ = 0; i_0__ < sigma_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, sigma[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 64;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "K", K);
        validate_non_negative_index("beta", "I", I);
        context__.validate_dims("parameter initialization", "beta", "vector_d", context__.to_vec(I,K));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > beta(I, Eigen::Matrix<double, Eigen::Dynamic, 1>(K));
        size_t beta_j_1_max__ = K;
        size_t beta_k_0_max__ = I;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                beta[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t beta_i_0_max__ = I;
        for (size_t i_0__ = 0; i_0__ < beta_i_0_max__; ++i_0__) {
            try {
                writer__.simplex_unconstrain(beta[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 65;
        if (!(context__.contains_r("rho")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rho missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rho");
        pos__ = 0U;
        validate_non_negative_index("rho", "I", I);
        context__.validate_dims("parameter initialization", "rho", "double", context__.to_vec(I));
        std::vector<double> rho(I, double(0));
        size_t rho_k_0_max__ = I;
        for (size_t k_0__ = 0; k_0__ < rho_k_0_max__; ++k_0__) {
            rho[k_0__] = vals_r__[pos__++];
        }
        size_t rho_i_0_max__ = I;
        for (size_t i_0__ = 0; i_0__ < rho_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, rho[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rho: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 66;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "I", I);
        context__.validate_dims("parameter initialization", "alpha", "double", context__.to_vec(I));
        std::vector<double> alpha(I, double(0));
        size_t alpha_k_0_max__ = I;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            alpha[k_0__] = vals_r__[pos__++];
        }
        size_t alpha_i_0_max__ = I;
        for (size_t i_0__ = 0; i_0__ < alpha_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, alpha[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 67;
        if (!(context__.contains_r("eta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable eta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("eta");
        pos__ = 0U;
        validate_non_negative_index("eta", "sumN", sumN);
        validate_non_negative_index("eta", "I", I);
        context__.validate_dims("parameter initialization", "eta", "vector_d", context__.to_vec(I,sumN));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > eta(I, Eigen::Matrix<double, Eigen::Dynamic, 1>(sumN));
        size_t eta_j_1_max__ = sumN;
        size_t eta_k_0_max__ = I;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < eta_k_0_max__; ++k_0__) {
                eta[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t eta_i_0_max__ = I;
        for (size_t i_0__ = 0; i_0__ < eta_i_0_max__; ++i_0__) {
            try {
                writer__.vector_unconstrain(eta[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable eta: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 63;
            std::vector<local_scalar_t__> sigma;
            size_t sigma_d_0_max__ = I;
            sigma.reserve(sigma_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sigma_d_0_max__; ++d_0__) {
                if (jacobian__)
                    sigma.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    sigma.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 64;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > beta;
            size_t beta_d_0_max__ = I;
            beta.reserve(beta_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < beta_d_0_max__; ++d_0__) {
                if (jacobian__)
                    beta.push_back(in__.simplex_constrain(K, lp__));
                else
                    beta.push_back(in__.simplex_constrain(K));
            }
            current_statement_begin__ = 65;
            std::vector<local_scalar_t__> rho;
            size_t rho_d_0_max__ = I;
            rho.reserve(rho_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < rho_d_0_max__; ++d_0__) {
                if (jacobian__)
                    rho.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    rho.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 66;
            std::vector<local_scalar_t__> alpha;
            size_t alpha_d_0_max__ = I;
            alpha.reserve(alpha_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < alpha_d_0_max__; ++d_0__) {
                if (jacobian__)
                    alpha.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    alpha.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 67;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > eta;
            size_t eta_d_0_max__ = I;
            eta.reserve(eta_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < eta_d_0_max__; ++d_0__) {
                if (jacobian__)
                    eta.push_back(in__.vector_constrain(sumN, lp__));
                else
                    eta.push_back(in__.vector_constrain(sumN));
            }
            // transformed parameters
            current_statement_begin__ = 71;
            validate_non_negative_index("f", "sumN", sumN);
            validate_non_negative_index("f", "I", I);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > f(I, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(sumN));
            stan::math::initialize(f, DUMMY_VAR__);
            stan::math::fill(f, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 72;
            for (int i = 1; i <= I; ++i) {
                {
                current_statement_begin__ = 73;
                validate_non_negative_index("K_matrix", "sumN", sumN);
                validate_non_negative_index("K_matrix", "sumN", sumN);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K_matrix(sumN, sumN);
                stan::math::initialize(K_matrix, DUMMY_VAR__);
                stan::math::fill(K_matrix, DUMMY_VAR__);
                stan::math::assign(K_matrix,add(cov_exp_quad(time, get_base1(alpha, i, "alpha", 1), get_base1(rho, i, "rho", 1)), diag_matrix(rep_vector(1e-9, sumN))));
                current_statement_begin__ = 75;
                validate_non_negative_index("L_K", "sumN", sumN);
                validate_non_negative_index("L_K", "sumN", sumN);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_K(sumN, sumN);
                stan::math::initialize(L_K, DUMMY_VAR__);
                stan::math::fill(L_K, DUMMY_VAR__);
                stan::math::assign(L_K,cholesky_decompose(K_matrix));
                current_statement_begin__ = 76;
                stan::model::assign(f, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            multiply(L_K, get_base1(eta, i, "eta", 1)), 
                            "assigning variable f");
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 71;
            size_t f_k_0_max__ = I;
            size_t f_j_1_max__ = sumN;
            for (size_t k_0__ = 0; k_0__ < f_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < f_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(f[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: f" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable f: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            // model body
            current_statement_begin__ = 81;
            for (int i = 1; i <= I; ++i) {
                current_statement_begin__ = 82;
                lp_accum__.add(normal_log<propto__>(get_base1(sigma, i, "sigma", 1), 0, 1));
                current_statement_begin__ = 83;
                lp_accum__.add(normal_log<propto__>(get_base1(rho, i, "rho", 1), 0, 3));
                current_statement_begin__ = 84;
                lp_accum__.add(normal_log<propto__>(get_base1(alpha, i, "alpha", 1), 0, 1));
                current_statement_begin__ = 85;
                lp_accum__.add(normal_log<propto__>(get_base1(eta, i, "eta", 1), 0, 1));
                current_statement_begin__ = 86;
                lp_accum__.add(normal_log(get_base1(y_std, i, "y_std", 1), add(multiply(X_std, get_base1(beta, i, "beta", 1)), stan::model::rvalue(get_base1(f, i, "f", 1), stan::model::cons_list(stan::model::index_min_max(1, N), stan::model::nil_index_list()), "f[i]")), get_base1(sigma, i, "sigma", 1)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("sigma");
        names__.push_back("beta");
        names__.push_back("rho");
        names__.push_back("alpha");
        names__.push_back("eta");
        names__.push_back("f");
        names__.push_back("y_sim");
        names__.push_back("y_pred");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(I);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(I);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(I);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(I);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(I);
        dims__.push_back(sumN);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(I);
        dims__.push_back(sumN);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(I);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(I);
        dims__.push_back(N_pred);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_model8_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> sigma;
        size_t sigma_d_0_max__ = I;
        sigma.reserve(sigma_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sigma_d_0_max__; ++d_0__) {
            sigma.push_back(in__.scalar_lb_constrain(0));
        }
        size_t sigma_k_0_max__ = I;
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            vars__.push_back(sigma[k_0__]);
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > beta;
        size_t beta_d_0_max__ = I;
        beta.reserve(beta_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < beta_d_0_max__; ++d_0__) {
            beta.push_back(in__.simplex_constrain(K));
        }
        size_t beta_j_1_max__ = K;
        size_t beta_k_0_max__ = I;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                vars__.push_back(beta[k_0__](j_1__));
            }
        }
        std::vector<double> rho;
        size_t rho_d_0_max__ = I;
        rho.reserve(rho_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < rho_d_0_max__; ++d_0__) {
            rho.push_back(in__.scalar_lb_constrain(0));
        }
        size_t rho_k_0_max__ = I;
        for (size_t k_0__ = 0; k_0__ < rho_k_0_max__; ++k_0__) {
            vars__.push_back(rho[k_0__]);
        }
        std::vector<double> alpha;
        size_t alpha_d_0_max__ = I;
        alpha.reserve(alpha_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < alpha_d_0_max__; ++d_0__) {
            alpha.push_back(in__.scalar_lb_constrain(0));
        }
        size_t alpha_k_0_max__ = I;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            vars__.push_back(alpha[k_0__]);
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > eta;
        size_t eta_d_0_max__ = I;
        eta.reserve(eta_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < eta_d_0_max__; ++d_0__) {
            eta.push_back(in__.vector_constrain(sumN));
        }
        size_t eta_j_1_max__ = sumN;
        size_t eta_k_0_max__ = I;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < eta_k_0_max__; ++k_0__) {
                vars__.push_back(eta[k_0__](j_1__));
            }
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 71;
            validate_non_negative_index("f", "sumN", sumN);
            validate_non_negative_index("f", "I", I);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > f(I, Eigen::Matrix<double, Eigen::Dynamic, 1>(sumN));
            stan::math::initialize(f, DUMMY_VAR__);
            stan::math::fill(f, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 72;
            for (int i = 1; i <= I; ++i) {
                {
                current_statement_begin__ = 73;
                validate_non_negative_index("K_matrix", "sumN", sumN);
                validate_non_negative_index("K_matrix", "sumN", sumN);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K_matrix(sumN, sumN);
                stan::math::initialize(K_matrix, DUMMY_VAR__);
                stan::math::fill(K_matrix, DUMMY_VAR__);
                stan::math::assign(K_matrix,add(cov_exp_quad(time, get_base1(alpha, i, "alpha", 1), get_base1(rho, i, "rho", 1)), diag_matrix(rep_vector(1e-9, sumN))));
                current_statement_begin__ = 75;
                validate_non_negative_index("L_K", "sumN", sumN);
                validate_non_negative_index("L_K", "sumN", sumN);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_K(sumN, sumN);
                stan::math::initialize(L_K, DUMMY_VAR__);
                stan::math::fill(L_K, DUMMY_VAR__);
                stan::math::assign(L_K,cholesky_decompose(K_matrix));
                current_statement_begin__ = 76;
                stan::model::assign(f, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            multiply(L_K, get_base1(eta, i, "eta", 1)), 
                            "assigning variable f");
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t f_j_1_max__ = sumN;
                size_t f_k_0_max__ = I;
                for (size_t j_1__ = 0; j_1__ < f_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < f_k_0_max__; ++k_0__) {
                        vars__.push_back(f[k_0__](j_1__));
                    }
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 92;
            validate_non_negative_index("y_sim", "N", N);
            validate_non_negative_index("y_sim", "I", I);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > y_sim(I, Eigen::Matrix<double, Eigen::Dynamic, 1>(N));
            stan::math::initialize(y_sim, DUMMY_VAR__);
            stan::math::fill(y_sim, DUMMY_VAR__);
            current_statement_begin__ = 93;
            validate_non_negative_index("y_pred", "N_pred", N_pred);
            validate_non_negative_index("y_pred", "I", I);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > y_pred(I, Eigen::Matrix<double, Eigen::Dynamic, 1>(N_pred));
            stan::math::initialize(y_pred, DUMMY_VAR__);
            stan::math::fill(y_pred, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 94;
            for (int i = 1; i <= I; ++i) {
                current_statement_begin__ = 95;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 96;
                    stan::model::assign(y_sim, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), 
                                ((normal_rng((multiply(stan::model::rvalue(X_std, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X_std"), get_base1(beta, i, "beta", 1)) + get_base1(get_base1(f, i, "f", 1), n, "f", 2)), get_base1(sigma, i, "sigma", 1), base_rng__) * get_base1(sd_y, i, "sd_y", 1)) + get_base1(mean_y, i, "mean_y", 1)), 
                                "assigning variable y_sim");
                }
                current_statement_begin__ = 99;
                for (int j = 1; j <= N_pred; ++j) {
                    current_statement_begin__ = 100;
                    stan::model::assign(y_pred, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                ((normal_rng((multiply(stan::model::rvalue(X_pred_std, stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X_pred_std"), get_base1(beta, i, "beta", 1)) + get_base1(get_base1(f, i, "f", 1), (N + j), "f", 2)), get_base1(sigma, i, "sigma", 1), base_rng__) * get_base1(sd_y, i, "sd_y", 1)) + get_base1(mean_y, i, "mean_y", 1)), 
                                "assigning variable y_pred");
                }
            }
            // validate, write generated quantities
            current_statement_begin__ = 92;
            size_t y_sim_j_1_max__ = N;
            size_t y_sim_k_0_max__ = I;
            for (size_t j_1__ = 0; j_1__ < y_sim_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < y_sim_k_0_max__; ++k_0__) {
                    vars__.push_back(y_sim[k_0__](j_1__));
                }
            }
            current_statement_begin__ = 93;
            size_t y_pred_j_1_max__ = N_pred;
            size_t y_pred_k_0_max__ = I;
            for (size_t j_1__ = 0; j_1__ < y_pred_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < y_pred_k_0_max__; ++k_0__) {
                    vars__.push_back(y_pred[k_0__](j_1__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_model8";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t sigma_k_0_max__ = I;
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_j_1_max__ = K;
        size_t beta_k_0_max__ = I;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t rho_k_0_max__ = I;
        for (size_t k_0__ = 0; k_0__ < rho_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_k_0_max__ = I;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t eta_j_1_max__ = sumN;
        size_t eta_k_0_max__ = I;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < eta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "eta" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t f_j_1_max__ = sumN;
            size_t f_k_0_max__ = I;
            for (size_t j_1__ = 0; j_1__ < f_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < f_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "f" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t y_sim_j_1_max__ = N;
        size_t y_sim_k_0_max__ = I;
        for (size_t j_1__ = 0; j_1__ < y_sim_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < y_sim_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "y_sim" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t y_pred_j_1_max__ = N_pred;
        size_t y_pred_k_0_max__ = I;
        for (size_t j_1__ = 0; j_1__ < y_pred_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < y_pred_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "y_pred" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t sigma_k_0_max__ = I;
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_j_1_max__ = (K - 1);
        size_t beta_k_0_max__ = I;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t rho_k_0_max__ = I;
        for (size_t k_0__ = 0; k_0__ < rho_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_k_0_max__ = I;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t eta_j_1_max__ = sumN;
        size_t eta_k_0_max__ = I;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < eta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "eta" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t f_j_1_max__ = sumN;
            size_t f_k_0_max__ = I;
            for (size_t j_1__ = 0; j_1__ < f_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < f_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "f" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t y_sim_j_1_max__ = N;
        size_t y_sim_k_0_max__ = I;
        for (size_t j_1__ = 0; j_1__ < y_sim_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < y_sim_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "y_sim" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t y_pred_j_1_max__ = N_pred;
        size_t y_pred_k_0_max__ = I;
        for (size_t j_1__ = 0; j_1__ < y_pred_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < y_pred_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "y_pred" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
}; // model
}  // namespace
typedef model_model8_namespace::model_model8 stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
